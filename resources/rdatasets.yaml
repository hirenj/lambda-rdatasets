AWSTemplateFormatVersion: '2010-09-09'
Resources:
  serialiseDataset:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.serialiseDataset = function(event, context) {  context.succeed('OK');};
      Description: serialiseDataset
      Handler: index.serialiseDataset
      Role: !GetAtt 'LambdaSerialiseDatasetRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 1024
      Timeout: 300
  signRdataUrl:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: '''use strict'';const AWS = require(''aws-sdk'');exports.signRdataUrl
          = function(event, context) {    let s3Params = {        Bucket: process.env.BUCKET,        Key:
          ''rdata/''+event.path.split(''/'').reverse().shift(),        Expires: 10000    };    let
          s3 = new AWS.S3();    let response = {        statusCode: 302,        headers:
          {            ''Location'' : ''''        },        body: ''''    };    s3.getSignedUrl(''getObject'',
          s3Params, function(err, url){        response.body = url;        response.headers.Location
          = url;        context.done(err,response);    });};'
      Description: signRdataUrl
      Handler: index.signRdataUrl
      Environment:
        Variables:
          BUCKET: !Sub '${AWS::StackName}-gator'
      Role: !GetAtt 'LambdaReadRDatasetsRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 300
  serialiseDatasetBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        EnvironmentVariables:
          - Name: BUILD_BUCKET
            Value: !Sub '${AWS::StackName}-gator'
          - Name: BUILD_TABLE
            Value: !Ref 'data'
          - Name: BUILD_KEY
            Value: ''
        ComputeType: BUILD_GENERAL1_SMALL
        Image: docker.io/hirenj/rdataset-builder
        Type: LINUX_CONTAINER
      Name: !Sub '${AWS::StackName}-SerialiseDatasetBuild'
      ServiceRole: !Ref 'LambdaBuildSerialiseDatasetRole'
      Source:
        Location: https://github.com/hirenj/lambda-rdatasets.git
        Type: GITHUB
  LambdaSerialiseDatasetRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'WriteRDatasets'
        - !Ref 'ReadUploaded'
        - !Ref 'WriteDatasets'
        - !Ref 'RunSerialiseDatasetBuild'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  LambdaReadRDatasetsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'ReadRDatasets'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  LambdaBuildSerialiseDatasetRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'WriteRDatasets'
        - !Ref 'ReadUploaded'
        - !Ref 'WriteDatasets'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
  WriteRDatasets:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Write R datasets
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-gator/rdata/*'
  ReadRDatasets:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Read R datasets
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-gator/rdata/*'
  ReadUploaded:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Read data uploaded to gator
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-gator/uploads/*'
  RunSerialiseDatasetBuild:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allow function to trigger builds
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - codebuild:StartBuild
            Resource:
              - !GetAtt 'serialiseDatasetBuildProject.Arn'
  serialiseDatasetLogWriterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: serialiseDatasetLogWriterPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      Roles:
        - !Ref 'LambdaSerialiseDatasetRole'
        - !Ref 'LambdaBuildSerialiseDatasetRole'
Outputs: {}
